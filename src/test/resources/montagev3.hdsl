var timestamp = "20150912_115742_24534"
var bigRegionFilename = "big_region_" + timestamp + ".hdr"
var pimagesFilename = "pimages_" + timestamp + ".tbl"
var atlasPrefix = "2mass-atlas-001124n-"
var pAtlasPrefix = "p" + atlasPrefix
var cAtlasPrefix = "c" + atlasPrefix
var correctionsFilename = "corrections.tbl"

process MProjectPP(in, bigRegion): (Signal, Signal) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mProjectPP"
  amqpCommand()
}

mProjectPPs = new MProjectPP()[6]
ins = new Signal()[6]
ins[0].xVal = "0.90423"
ins[0].fits = "j0880044"
ins[1].xVal = "0.90448"
ins[1].fits = "j0870244"
ins[2].xVal = "0.90448"
ins[2].fits = "j0870244"
ins[3].xVal = "0.90415"
ins[3].fits = "j0870232"
ins[4].xVal = "0.90640"
ins[4].fits = "j0860044"
ins[5].xVal = "0.90682"
ins[5].fits = "j0860032"

inBigRegion = new Signal()
inBigRegion.filename = "big_region_" + timestamp + ".hdr"

for (proc, idx <- mProjectPPs) {
  (ins[idx], inBigRegion) -> proc -> (atlases[idx], atlasAreas[idx])
  proc.config.executor.args = ["-X", "-x", proc.in.xVal, atlasPrefix + proc.in.fits + ".fits",
    pAtlasPrefix + proc.in.fits + ".fits", proc.bigRegion.filename]
}



process MDiffFit(s1, s2, s3, s4, s5, s6, s7): (Signal, Signal) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mDiffFit"
  amqpCommand()
}

mDiffFits = new MDiffFit()[9]
mDiffFits[0].config.executor.args = ["-s", "fit.000001.000002.txt", pAtlasPrefix + "j0880044.fits",
  pAtlasPrefix + "j0880032.fits", "diff.000001.000002.fits", bigRegionFilename]
mDiffFits[1].config.executor.args = ["-s", "fit.000001.000004.txt", pAtlasPrefix + "j0880044.fits",
  pAtlasPrefix + "j0870232.fits", "diff.000001.000004.fits", bigRegionFilename]
mDiffFits[2].config.executor.args = ["-s", "fit.000002.000003.txt", pAtlasPrefix + "j0880032.fits",
  pAtlasPrefix + "j0870244.fits", "diff.000002.000003.fits", bigRegionFilename]
mDiffFits[3].config.executor.args = ["-s", "fit.000002.000004.txt", pAtlasPrefix + "j0880032.fits",
  pAtlasPrefix + "j0870232.fits", "diff.000002.000004.fits", bigRegionFilename]
mDiffFits[4].config.executor.args = ["-s", "fit.000003.000004.txt", pAtlasPrefix + "j0870244.fits",
  pAtlasPrefix + "j0870232.fits", "diff.000003.000004.fits", bigRegionFilename]
mDiffFits[5].config.executor.args = ["-s", "fit.000003.000006.txt", pAtlasPrefix + "j0870244.fits",
  pAtlasPrefix + "j0860032.fits", "diff.000003.000006.fits", bigRegionFilename]
mDiffFits[6].config.executor.args = ["-s", "fit.000004.000005.txt", pAtlasPrefix + "j0870232.fits",
  pAtlasPrefix + "j0860044.fits", "diff.000004.000005.fits", bigRegionFilename]
mDiffFits[7].config.executor.args = ["-s", "fit.000004.000006.txt", pAtlasPrefix + "j0870232.fits",
  pAtlasPrefix + "j0860032.fits", "diff.000004.000006.fits", bigRegionFilename]
mDiffFits[8].config.executor.args = ["-s", "fit.000005.000006.txt", pAtlasPrefix + "j0860044.fits",
  pAtlasPrefix + "j0860032.fits", "diff.000005.000006.fits", bigRegionFilename]

for (proc, idx <- mDiffFits) {
  (mDiff, mFitplane, atlases[idx/2], atlasAreas[idx/2]) -> proc
}

// these connections are irregular so we can't do a for-loop over them
(atlases[1], atlasAreas[1]) -> mDiffFits[0]
(atlases[3], atlasAreas[3]) -> mDiffFits[1]
(atlases[2], atlasAreas[2]) -> mDiffFits[2]
(atlases[3], atlasAreas[3]) -> mDiffFits[3]
(atlases[3], atlasAreas[3]) -> mDiffFits[4]
(atlases[5], atlasAreas[5]) -> mDiffFits[5]
(atlases[4], atlasAreas[4]) -> mDiffFits[6]
(atlases[5], atlasAreas[5]) -> mDiffFits[7]
(atlases[5], atlasAreas[5]) -> mDiffFits[8]

for (proc, idx <- mDiffFits) {
  inBigRegion -> proc -> (fits[idx], diffs[idx])
}



process MConcatFit(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mConcatFit"
  config.executor.args = ["statfile_" + timestamp + ".tbl", "fits.tbl", "."]
  amqpCommand()
}

mConcatFit = new MConcatFit()
statfile -> mConcatFit -> allFits
for (sig <- fits) {
  sig -> mConcatFit
}



process MBgModel(s1, s2) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mBgModel"
  config.executor.args = ["-i", "100000", pimagesFilename, "fits.tbl", "corrections.tbl"]
  amqpCommand()
}

(pimages, allFits) -> MBgModel -> corrections



process MBackground(s1, s2, s3, s4): (Signal, Signal) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mBackground"
  amqpCommand()
}

mBackgrounds = new MBackground()[6]
mBackgrounds[0].config.executor.args = ["-t", pAtlasPrefix + "j0880044.fits",
  cAtlasPrefix + "j0880044.fits", pimagesFilename, correctionsFilename]
mBackgrounds[1].config.executor.args = ["-t", pAtlasPrefix + "j0880032.fits",
  cAtlasPrefix + "j0880032.fits", pimagesFilename, correctionsFilename]
mBackgrounds[2].config.executor.args = ["-t", pAtlasPrefix + "j0870244.fits",
  cAtlasPrefix + "j0870244.fits", pimagesFilename, correctionsFilename]
mBackgrounds[3].config.executor.args = ["-t", pAtlasPrefix + "j0870232.fits",
  cAtlasPrefix + "j0870232.fits", pimagesFilename, correctionsFilename]
mBackgrounds[4].config.executor.args = ["-t", pAtlasPrefix + "j0860044.fits",
  cAtlasPrefix + "j0860044.fits", pimagesFilename, correctionsFilename]
mBackgrounds[5].config.executor.args = ["-t", pAtlasPrefix + "j0860032.fits",
  cAtlasPrefix + "j0860032.fits", pimagesFilename, correctionsFilename]

for (proc, idx <- mBackgrounds) {
  (atlases[idx], atlasAreas[idx], pimages, corrections) -> proc -> (masses[idx], massAreas[idx])
}



process MImgtbl(s1, s2, s3, s4, s5, s6, s7) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mImgtbl"
  config.executor.args = ["-t", "cimages_" + timestamp + ".tbl", ".", "newcimages.tbl"]
  amqpCommand()
}

mImgtbl = new MImgtbl()
cimages -> mImgtbl -> newcimages
for (sig <- masses) {
  sig -> mImgtbl
}



process MAdd(s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14): (Signal, Signal) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mAdd"
  config.executor.args = ["-e", "newcimages.tbl", "region_" + timestamp + ".hdr", "mosaic_" + timestamp + ".fits"]
  amqpCommand()
}

mAdd = new MAdd()
(newcimages, region) -> mAdd -> (mosaic, mosaicArea)
for (sig, idx <- masses) {
  (sig, massAreas[idx]) -> mAdd
}



process MShrink(s) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mShrink"
  config.executor.args = ["mosaic_" + timestamp + ".fits", "shrunken_" + timestamp + ".fits", "1"]
  amqpCommand()
}

mosaic -> MShrink -> shrunken



process MJPEG(s) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mJPEG"
  config.executor.args = ["-ct", "1", "-gray", "shrunken_" + timestamp + ".fits",
    "min", "max", "gaussianlog", "-out", "shrunken_" + timestamp + ".jpg"]
  amqpCommand()
}

shrunken -> MJPEG -> shrunkenJpg



(ins[0], inBigRegion, ins[1], ins[2], ins[3], ins[4], ins[5], mDiff, mFitplane, statfile, pimages, cimages, region) -> workflow
for (sig <- diffs) {
  workflow -> sig
}
workflow -> (mosaicArea, shrunkenJpg)
