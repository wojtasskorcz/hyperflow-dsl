var timestamp = "20150705_164350_21580"
var atlasPrefix = "2mass-atlas-001124n-"
var pAtlasPrefix = "p" + atlasPrefix
var cAtlasPrefix = "c" + atlasPrefix

process MProjectPP(in, bigRegion): (s1, s2) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mProjectPP"
  amqpCommand()
}

mProjectPPs = new MProjectPP()[6]
ins = new Signal()[6]
ins[0].xVal = "0.90423"
ins[0].fits = "j0880044"
ins[1].xVal = "0.90465"
ins[1].fits = "j0880032"
ins[2].xVal = "0.90448"
ins[2].fits = "j0870244"
ins[3].xVal = "0.90415"
ins[3].fits = "j0870232"
ins[4].xVal = "0.90640"
ins[4].fits = "j0860044"
ins[5].xVal = "0.90682"
ins[5].fits = "j0860032"

inBigRegion = new Signal()
inBigRegion.filename = "big_region_" + timestamp + ".hdr"

for (proc, idx <- mProjectPPs) {
  (ins[idx], inBigRegion) -> proc -> (atlases[idx], atlasAreas[idx])
  proc.config.executor.args = ["-X", "-x", proc.in.xVal, atlasPrefix + proc.in.fits + ".fits",
    pAtlasPrefix + proc.in.fits + ".fits", proc.bigRegion.filename]
}



process MDiffFit(diff, fitplane, atlas1, atlasArea1, atlas2, atlasArea2, bigRegion): (s1, s2) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mDiffFit"
  amqpCommand()
}

mDiffFits = new MDiffFit()[9]
atlases[0].fit1 = "000001"
atlases[0].fit2 = "j0880044"
atlases[1].fit1 = "000002"
atlases[1].fit2 = "j0880032"
atlases[2].fit1 = "000003"
atlases[2].fit2 = "j0870244"
atlases[3].fit1 = "000004"
atlases[3].fit2 = "j0870232"
atlases[4].fit1 = "000005"
atlases[4].fit2 = "j0860044"
atlases[5].fit1 = "000006"
atlases[5].fit2 = "j0860032"

for (proc, idx <- mDiffFits) {
  (mDiff, mFitplane, atlases[idx/2], atlasAreas[idx/2]) -> proc
}

// these connections are irregular so we can't do a for-loop over them
(atlases[1], atlasAreas[1]) -> mDiffFits[0]
(atlases[3], atlasAreas[3]) -> mDiffFits[1]
(atlases[2], atlasAreas[2]) -> mDiffFits[2]
(atlases[3], atlasAreas[3]) -> mDiffFits[3]
(atlases[3], atlasAreas[3]) -> mDiffFits[4]
(atlases[5], atlasAreas[5]) -> mDiffFits[5]
(atlases[4], atlasAreas[4]) -> mDiffFits[6]
(atlases[5], atlasAreas[5]) -> mDiffFits[7]
(atlases[5], atlasAreas[5]) -> mDiffFits[8]

for (proc, idx <- mDiffFits) {
  inBigRegion -> proc -> (fits[idx], diffs[idx])
  proc.config.executor.args = ["-s", "fit." + proc.atlas1.fit1 + "." + proc.atlas2.fit1 + ".txt", pAtlasPrefix + proc.atlas1.fit2 + ".fits",
    pAtlasPrefix + proc.atlas2.fit2 + ".fits", "diff." + proc.atlas1.fit1 + "." + proc.atlas2.fit1 + ".fits", proc.bigRegion.filename]
}



process MConcatFit(statfile, s2, s3, s4, s5, s6, s7, s8, s9, s10): (fits) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mConcatFit"
  amqpCommand()
}

mConcatFit = new MConcatFit()
statfile -> mConcatFit -> allFits
for (sig <- fits) {
  sig -> mConcatFit
}
statfile.filename = "statfile_" + timestamp + ".tbl"
allFits.filename = "fits.tbl"
mConcatFit.config.executor.args = [mConcatFit.statfile.filename, mConcatFit.fits.filename, "."]



process MBgModel(pimages, allFits): (corrections) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mBgModel"
  amqpCommand()
}

mBgModel = new MBgModel()
(pimages, allFits) -> mBgModel -> corrections
pimages.filename = "pimages_" + timestamp + ".tbl"
corrections.filename = "corrections.tbl"
mBgModel.config.executor.args = ["-i", "100000", mBgModel.pimages.filename, mBgModel.allFits.filename, mBgModel.corrections.filename]



process MBackground(atlas, atlasArea, pimages, corrections): (s1, s2) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mBackground"
  amqpCommand()
}

mBackgrounds = new MBackground()[6]

for (proc, idx <- mBackgrounds) {
  (atlases[idx], atlasAreas[idx], pimages, corrections) -> proc -> (masses[idx], massAreas[idx])
  proc.config.executor.args = ["-t", pAtlasPrefix + proc.atlas.fit2 + ".fits",
    cAtlasPrefix + proc.atlas.fit2 + ".fits", proc.pimages.filename, proc.corrections.filename]
}



process MImgtbl(cimages, s2, s3, s4, s5, s6, s7): (newcimages) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mImgtbl"
  amqpCommand()
}

mImgtbl = new MImgtbl()
cimages -> mImgtbl -> newcimages
for (sig <- masses) {
  sig -> mImgtbl
}
cimages.filename = "cimages_" + timestamp + ".tbl"
newcimages.filename = "newcimages.tbl"
mImgtbl.config.executor.args = ["-t", mImgtbl.cimages.filename, ".", mImgtbl.newcimages.filename]



process MAdd(newcimages, region, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14): (mosaic, s16) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mAdd"
  amqpCommand()
}

mAdd = new MAdd()
(newcimages, region) -> mAdd -> (mosaic, mosaicArea)
for (sig, idx <- masses) {
  (sig, massAreas[idx]) -> mAdd
}
region.filename = "region_" + timestamp + ".hdr"
mosaic.filename = "mosaic_" + timestamp + ".fits"
mAdd.config.executor.args = ["-e", mAdd.newcimages.filename, mAdd.region.filename, mAdd.mosaic.filename]



process MShrink(mosaic): (shrunken) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mShrink"
  amqpCommand()
}

mShrink = new MShrink()
mosaic -> mShrink -> shrunken
shrunken.filename = "shrunken_" + timestamp + ".fits"
mShrink.config.executor.args = [mShrink.mosaic.filename, mShrink.shrunken.filename, "1"]



process MJPEG(shrunkenFits): (shrunkenJpg) {
  executor = "syscommand"
  firingLimit = 1
  config.executor.executable = "mJPEG"
  amqpCommand()
}

mjpeg = new MJPEG()
shrunken -> mjpeg -> shrunkenJpg
shrunkenJpg.filename = "shrunken_" + timestamp + ".jpg"
mjpeg.config.executor.args = ["-ct", "1", "-gray", mjpeg.shrunkenFits.filename,
  "min", "max", "gaussianlog", "-out", mjpeg.shrunkenJpg.filename]



(ins[0], inBigRegion, ins[1], ins[2], ins[3], ins[4], ins[5], mDiff, mFitplane, statfile, pimages, cimages, region) -> workflow
for (sig <- diffs) {
  workflow -> sig
}
workflow -> (mosaicArea, shrunkenJpg)
